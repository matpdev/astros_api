generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int       @id @default(autoincrement())
  email            String?   @unique
  password         String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  firstName        String?
  lastName         String?
  document         String?
  phone            String?
  state            String?
  city             String?
  district         String?
  address          String?
  number           String?
  zipcode          String?
  roleTypeId       Int
  deletedAt        DateTime?
  imageIcon        String?
  integrationToken String?
  plataform        String?
  roleType         RoleType  @relation(fields: [roleTypeId], references: [id])
  errors           Errors[]
  notification     Boolean   @default(true)
  artist           Artist?   @relation(fields: [artistId], references: [id])
  artistId         Int?
  orders           Orders[]
}

model Errors {
  id        Int      @id @default(autoincrement())
  errorCode Int
  message   String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RoleType {
  id   Int    @id @default(autoincrement())
  name String
  user User[]
}

model Artist {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  fantasyName String
  transferFee Float
  cacheMin    Float
  cacheMax    Float
  lat         Float
  long        Float
  rank        Float?
  city        String?
  uf          String?
  district    String?
  address     String?
  number      String?
  icon        String?
  isAccepting Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  type        Json
  style       Json

  dates  Dates[]
  user   User[]
  orders Orders[]
  extras Extras[]
}

// instrumentId Int
// instrument   Instrument? @relation(fields: [instrumentId], references: [id])

model Categories {
  id        Int      @id @default(autoincrement())
  name      String
  icon      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Style {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Dates {
  id      Int     @id @default(autoincrement())
  date    String
  hourMin String
  isFree  Boolean @default(true)

  artist   Artist? @relation(fields: [artistId], references: [id])
  artistId Int?
}

//? Sem uso no momento

// model Instrument {
//   id        Int      @id @default(autoincrement())
//   name      String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   artist    Artist[]
// }

//! Lembrar no sistema de Orders com Metodo de Pagamento

model Orders {
  id         Int    @id @default(autoincrement())
  logGateway Json
  voucherId  Int?
  valueTotal Float
  dates      Json
  status     Status

  userId   Int
  artistId Int
  user     User   @relation(fields: [userId], references: [id])
  artist   Artist @relation(fields: [artistId], references: [id])
}

enum Status {
  PENDENTE
  APROVADO
}

model Extras {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  value       Float
  Artist      Artist? @relation(fields: [artistId], references: [id])
  artistId    Int?
}
