generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String?  @unique
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name         String?
  document     String?
  documentType String?
  birthDate    String?
  description  String?
  openingYear  String?
  phone        String?
  state        String?
  city         String?
  lat          Float?
  long         Float?
  district     String?
  address      String?
  number       String?
  zipcode      String?
  imageIcon    String?
  gender       String?

  roleTypeId       Int
  deletedAt        DateTime?
  integrationToken String?
  plataform        String?

  pagarmeId     String?
  houseCapacity Int?

  roleType     RoleType   @relation(fields: [roleTypeId], references: [id])
  errors       Errors[]
  notification Boolean    @default(true)
  artist       Artist?    @relation(fields: [artistId], references: [id])
  artistId     Int?
  orders       Orders[]
  Rooms        Rooms[]
  Messages     Messages[]
}

model Artist {
  id           Int      @id @default(autoincrement())
  fantasyName  String?
  transferFee  Float
  cacheMin     Float
  cacheMax     Float
  rank         Float?
  icon         String?
  isAccepting  Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  type         Json
  style        Json
  artistTypeId Int?

  instagramLink String?
  facebookLink  String?
  tikTokLink    String?
  spotifyLink   String?
  websiteLink   String?
  youtubeLink   String?

  account      String
  agency       String
  bank         String
  account_type String

  dates       Dates[]
  user        User[]
  orders      Orders[]
  extras      Extras[]
  Rooms       Rooms[]
  ArtistType  ArtistType? @relation(fields: [artistTypeId], references: [id])
  styleTypeId StyleType[]
}

model ArtistType {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  artist    Artist[]
}

model StyleType {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  artist    Artist[]
}

model Errors {
  id        Int      @id @default(autoincrement())
  errorCode Int
  message   String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RoleType {
  id   Int    @id @default(autoincrement())
  name String
  user User[]
}

// instrumentId Int
// instrument   Instrument? @relation(fields: [instrumentId], references: [id])

model Categories {
  id        Int      @id @default(autoincrement())
  name      String
  icon      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Style {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Dates {
  id      Int     @id @default(autoincrement())
  date    String
  hourMin String
  isFree  Boolean @default(true)

  artist   Artist? @relation(fields: [artistId], references: [id])
  artistId Int?
}

//! Lembrar no sistema de Orders com Metodo de Pagamento

model Orders {
  id             Int     @id @default(autoincrement())
  logGateway     Json
  voucherId      Int?
  valueTotal     Float
  dates          Json
  status         Status
  orderPagarmeId String?
  codePagarme    String?

  userId   Int
  artistId Int
  user     User   @relation(fields: [userId], references: [id])
  artist   Artist @relation(fields: [artistId], references: [id])
}

enum Status {
  PENDENTE
  APROVADO
}

model Extras {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  value       Float
  Artist      Artist? @relation(fields: [artistId], references: [id])
  artistId    Int?
}

model Messages {
  id        Int      @id @default(autoincrement())
  userId    Int
  roomsId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id])
  rooms Rooms @relation(fields: [roomsId], references: [id])
}

//! Trocar ID da Sala para UUID
model Rooms {
  id           String  @id @default(uuid())
  userIdClient Int
  userIdArtist Int
  isOpen       Boolean @default(true)

  user     User       @relation(fields: [userIdClient], references: [id])
  artist   Artist     @relation(fields: [userIdArtist], references: [id])
  messages Messages[]
}
