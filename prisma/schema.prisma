generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String?  @unique
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roleTypeId Int

  RoleType RoleType   @relation(fields: [roleTypeId], references: [id])
  Errors   Errors[]
  Orders   Orders[]
  Rooms    Rooms[]
  Messages Messages[]
}

model UserData {
  id Int @id @default(autoincrement())

  name         String?
  document     String?
  documentType String?
  birthDate    String?
  description  String?
  openingYear  String?
  phone        String?
  state        String?
  city         String?
  lat          Float?
  long         Float?
  district     String?
  address      String?
  number       String?
  zipcode      String?
  imageIcon    String?
  gender       String?

  roleTypeId       Int
  deletedAt        DateTime?
  integrationToken String?
  plataform        String?

  artistId Int
  Artist   Artist? @relation(fields: [artistId], references: [id])

  pagarmeId     String?
  houseCapacity Int?

  Errors   Errors[]
  RoleType RoleType   @relation(fields: [roleTypeId], references: [id])
  Orders   Orders[]
  Messages Messages[]
  Rooms    Rooms[]
}

model Artist {
  id           Int      @id @default(autoincrement())
  fantasyName  String?
  transferFee  Float
  cacheMin     Float
  cacheMax     Float
  rank         Float?
  icon         String?
  isAccepting  Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  artistTypeId Int?

  instagramLink String?
  facebookLink  String?
  tikTokLink    String?
  spotifyLink   String?
  websiteLink   String?
  youtubeLink   String?

  account      String
  agency       String
  bank         String
  account_type String

  Dates Dates[]

  Orders   Orders[]
  Extras   Extras[]
  Rooms    Rooms[]
  Messages Messages[]
  UserData UserData[]

  ArtistStyle    ArtistStyle[]
  ArtistBandType ArtistBandType[]
}

model ArtistType {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ArtistStyle {
  id       Int    @id @default(autoincrement())
  artistId Int
  artist   Artist @relation(fields: [artistId], references: [id])
  style    Int
  styles   Style  @relation(fields: [style], references: [id])
}

model ArtistBandType {
  id       Int      @id @default(autoincrement())
  artistId Int
  artist   Artist   @relation(fields: [artistId], references: [id])
  style    Int
  bandType BandType @relation(fields: [style], references: [id])
}

model Style {
  id          Int           @id @default(autoincrement())
  name        String
  ArtistStyle ArtistStyle[]
}

model BandType {
  id             Int              @id @default(autoincrement())
  name           String
  ArtistBandType ArtistBandType[]
}

model Errors {
  id        Int       @id @default(autoincrement())
  errorCode Int
  message   String
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  UserD     UserData? @relation(fields: [userDId], references: [id])
  userDId   Int?
}

model RoleType {
  id    Int        @id @default(autoincrement())
  name  String
  user  User[]
  UserD UserData[]
}

model Categories {
  id        Int      @id @default(autoincrement())
  name      String
  icon      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Dates {
  id      Int     @id @default(autoincrement())
  date    String
  hourMin String
  isFree  Boolean @default(true)

  Artist   Artist? @relation(fields: [artistId], references: [id])
  artistId Int?
}

model Orders {
  id             Int     @id @default(autoincrement())
  logGateway     Json
  voucherId      Int?
  valueTotal     Float
  dates          Json
  status         Status
  orderPagarmeId String?
  codePagarme    String?

  userId   Int
  artistId Int
  Artist   Artist    @relation(fields: [artistId], references: [id])
  UserD    UserData? @relation(fields: [userDId], references: [id])
  userDId  Int?
  User     User      @relation(fields: [userId], references: [id])
}

enum Status {
  PENDENTE
  APROVADO
}

model Extras {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  value       Float
  Artist      Artist? @relation(fields: [artistId], references: [id])
  artistId    Int?
}

model Messages {
  id        Int      @id @default(autoincrement())
  userId    Int?
  artistId  Int?
  message   String
  roomsId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User?     @relation(fields: [userId], references: [id])
  artist  Artist?   @relation(fields: [artistId], references: [id])
  rooms   Rooms     @relation(fields: [roomsId], references: [id])
  UserD   UserData? @relation(fields: [userDId], references: [id])
  userDId Int?
}

model Rooms {
  id           String  @id @default(uuid())
  userIdClient Int
  userIdArtist Int
  isOpen       Boolean @default(true)

  user     User       @relation(fields: [userIdClient], references: [id])
  artist   Artist     @relation(fields: [userIdArtist], references: [id])
  messages Messages[]
  UserD    UserData?  @relation(fields: [userDId], references: [id])
  userDId  Int?
}
