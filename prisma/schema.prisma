generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserLogin {
  id               Int       @id @default(autoincrement())
  name             String?
  email            String?   @unique
  password         String?
  phone            String?
  integrationToken String?
  plataform        String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime?

  roleTypeId Int
  RoleType   RoleType @relation(fields: [roleTypeId], references: [id])
  Errors     Errors[]
  Artist     Artist[]
  User       User[]
}

model User {
  id           Int     @id @default(autoincrement())
  document     String?
  documentType String?
  pagarmeId    String?

  userDataId     Int
  userLoginId    Int?
  Messages       Messages[]
  Rooms          Rooms[]
  UserData       UserData         @relation(fields: [userDataId], references: [id])
  UserLogin      UserLogin?       @relation(fields: [userLoginId], references: [id])
  Orders         Orders[]
  StandByAproove StandByAproove[]
}

model UserData {
  id            Int     @id @default(autoincrement())
  birthDate     String?
  description   String?
  openingYear   String?
  imageIcon     String?
  gender        String?
  houseCapacity Int?

  Artist  Artist[]
  User    User[]
  Address Address[]
}

model Address {
  id       Int      @id
  UserData UserData @relation(fields: [id], references: [id])

  lat      Float?
  long     Float?
  state    String?
  city     String?
  district String?
  address  String?
  number   String?
  zipcode  String?

  @@index([id])
}

model Artist {
  id           Int      @id @default(autoincrement())
  document     String?
  documentType String?
  fantasyName  String?
  transferFee  Float
  cacheMin     Float
  cacheMax     Float
  rank         Float?
  icon         String?
  isAccepting  Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  instagramLink String?
  facebookLink  String?
  tikTokLink    String?
  spotifyLink   String?
  websiteLink   String?
  youtubeLink   String?

  account      String
  agency       String
  bank         String
  account_type String

  userId       Int
  userDataId   Int
  artistTypeId Int?

  pagarmeId String?

  Dates    Dates[]
  Orders   Orders[]
  Extras   Extras[]
  Rooms    Rooms[]
  Messages Messages[]
  User     UserLogin  @relation(fields: [userId], references: [id])
  UserData UserData   @relation(fields: [userDataId], references: [id])

  ArtistStyle    ArtistStyle[]
  ArtistBandType ArtistBandType[]
  ArtistType     ArtistType?      @relation(fields: [artistTypeId], references: [id])
  StandByAproove StandByAproove[]
}

model ArtistType {
  id     Int      @id @default(autoincrement())
  name   String
  Artist Artist[]
}

model ArtistStyle {
  id       Int    @id @default(autoincrement())
  artistId Int
  artist   Artist @relation(fields: [artistId], references: [id])
  style    Int
  styles   Style  @relation(fields: [style], references: [id])
}

model ArtistBandType {
  id       Int      @id @default(autoincrement())
  artistId Int
  artist   Artist   @relation(fields: [artistId], references: [id])
  style    Int
  bandType BandType @relation(fields: [style], references: [id])
}

model Style {
  id          Int           @id @default(autoincrement())
  name        String
  ArtistStyle ArtistStyle[]
}

model BandType {
  id             Int              @id @default(autoincrement())
  name           String
  icon           String
  ArtistBandType ArtistBandType[]
}

model Errors {
  id        Int       @id @default(autoincrement())
  errorCode Int
  message   String
  userId    Int
  user      UserLogin @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model RoleType {
  id   Int         @id @default(autoincrement())
  name String
  user UserLogin[]
}

model Categories {
  id        Int      @id @default(autoincrement())
  name      String
  icon      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Dates {
  id      Int     @id @default(autoincrement())
  date    String
  hourMin String
  isFree  Boolean @default(true)

  Artist   Artist? @relation(fields: [artistId], references: [id])
  artistId Int?
}

model Orders {
  id             Int     @id @default(autoincrement())
  logGateway     Json
  voucherId      Int?
  valueTotal     Float
  dates          Json
  status         Status
  artistId       Int
  userId         Int
  orderPagarmeId String?
  codePagarme    String?
  cacheTotal     Float?
  transferFee    Float?

  User           User             @relation(fields: [userId], references: [id])
  Artist         Artist           @relation(fields: [artistId], references: [id])
  StandByAproove StandByAproove[]
}

enum Status {
  ESPERANDO
  PENDENTE
  APROVADO
}

model Extras {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  value       Float
  Artist      Artist? @relation(fields: [artistId], references: [id])
  artistId    Int?
}

model Messages {
  id        Int      @id @default(autoincrement())
  userId    Int?
  artistId  Int?
  message   String
  roomsId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User?   @relation(fields: [userId], references: [id])
  artist Artist? @relation(fields: [artistId], references: [id])
  rooms  Rooms   @relation(fields: [roomsId], references: [id])
}

model Rooms {
  id           String  @id @default(uuid())
  userIdClient Int
  userIdArtist Int
  isOpen       Boolean @default(true)

  user     User       @relation(fields: [userIdClient], references: [id])
  artist   Artist     @relation(fields: [userIdArtist], references: [id])
  messages Messages[]
}

model StandByAproove {
  id              Int           @id @default(autoincrement())
  reasonRejection String?
  status          StatusAproove
  costumerId      Int
  artistId        Int
  orderId         Int
  Artist          Artist        @relation(fields: [artistId], references: [id])
  User            User          @relation(fields: [costumerId], references: [id])
  Orders          Orders        @relation(fields: [orderId], references: [id])
}

enum StatusAproove {
  PENDENTE
  APROVADO
  REJEITADO
}
